<template>
  <div class="sole_table table-container" style="width: 100%;height: 100%">
    <em_dialogs ref="dialog" :label="label_input"   @eventFromDialog="recieveObj"></em_dialogs>
    <el-dialog title="导入" :visible.sync="dialogFormVisible" :modal-append-to-body="false" v-dialogDrag="true">
      <el-form>

      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="dialogFormVisible = false">取 消</el-button>
        <el-button type="primary" @click="dialogFormVisible = false">确 定</el-button>
      </div>
    </el-dialog>
    <div class="table digital_table">
      <el-row class="operation">
        <template v-for="item in this.data.operation">
          <component :is="item.type" :operation="item" :table_id="table_id" ref="child"></component>
        </template>
      </el-row>
      <!--<div class="filter-container">-->
        <!--<el-checkbox-group v-model="formThead">-->
          <!--<el-checkbox label="apple">-->
            <!--apple-->
          <!--</el-checkbox>-->
          <!--<el-checkbox label="banana">-->
            <!--banana-->
          <!--</el-checkbox>-->
          <!--<el-checkbox label="orange">-->
            <!--orange-->
          <!--</el-checkbox>-->
        <!--</el-checkbox-group>-->
      <!--</div>-->
      <el-table
        v-loading="listLoading"
        height="calc(100% - 92px)"
        highlight-current-row
        @current-change="handleCurrentChange"
        ref="multipleTable"
        tooltip-effect="dark"
        :data="tableData"
        style="width: 100%"
        @selection-change="handleSelectionChange">
        <el-table-column
          type="index"
          fixed="left"
          align="center"
        >
        </el-table-column>
        <el-table-column
          align="center"
          type="selection"
          width="55">
        </el-table-column>
        <el-table-column v-for="(item,index) in label"
                         :key="index"
                         :prop="item.prop"
                         :label="item.name"
                         :min-width="item.width"
                         align="center"
                         :show-overflow-tooltip="true"
        >
        </el-table-column>
      </el-table>
      <div class="pages">
        <el-pagination
          @size-change="handleSizeChange"
          @current-change="handleCurrentChangepage"
          :current-page="currentPage"
          :page-sizes="[10, 20,30,40]"
          :page-size="10"
          layout="total, sizes, prev, pager, next, jumper"
          :total="totalSize">
        </el-pagination>
      </div>

    </div>
  </div>


</template>

<script>
  import {add, dele, modify, find} from "@/api/table_operate"
  import em_button from "@/components/em_button/em_button"
  import em_input from "@/components/em_input/em_input"
  // import em_select from "@/components/em_select/em_select"
  import em_dialogs from "@/components/em_dialogs/em_dialogs"
  import complex_em_input from "@/components/complex_em_input/complex_em_input"
  import em_date from "@/components/em_date/em_date"
  export default {
    name: "sole_table",
    components: {
      em_button,
      em_input,
      complex_em_input,
      em_date,
      em_dialogs
    },
    data() {
      return {
        label: [],
        table_id:"",
        label_input:[],
        tableData: [],
        listLoading:false,
        currentRow: null,
        multipleSelection: [],
        ids: [],
        input: '',
        currentPage: 1,
        pageSize: 10,
        totalSize: null,
        table_list: [],
        formLabelWidth: '120px',
        dialogVisible: false,
        delever_obj:"",      //主要保存add,alter请求的url,table_id
        alter_obj:"",
        dialogFormVisible: false,
        formLabelWidth: '120px'
      }
    },
    props: ["data"],
    mounted() {
      this.table_id=this.data.table.id;
      this.label=this.data.table.label;
      this.label_input=this.data.table.label.filter(val=>{
          return val.add_show
     });
     console.log(this.label);
      this.init(); //初始化表格数据

      this.bus.$on(this.data.table.id, obj => {
        this.control(obj)
      });

    },
    methods: {

      handleSelectionChange(val) {    //多选框（选中删除）
        this.multipleSelection = val;
        console.log(this.multipleSelection);

      },
      handleCurrentChange(val) {     //单选行 （选中修改）
        this.currentRow = val;
        this.alter_obj=this.currentRow;
        console.log(this.alter_obj);
        this.bus.$emit("alter",this.alter_obj)

      },
      handleCurrentChangepage(val) {        //当前页
        console.log(`当前页: ${val}`);
        this.currentPage = val;
        // console.log(this.currentPage);
        this.init();
      },
      handleSizeChange(val) {                 //每页几条
        console.log(`每页 ${val} 条`);
        this.pageSize = val;
        this.init();  //重新请求表格数据
      },
      init() {                               //表格加载数据

        let obj = {
          pageNum: this.currentPage,
          pageSize: this.pageSize
        };
        if (this.$refs.child[0].time1) {
          let time1 = this.$refs.child[0].time1;    //时间范围查询参数
          if (time1) {
            obj.startTime = time1.getTime();

          }
        }
        if (this.$refs.child[0].time2) {
          let time2 = this.$refs.child[0].time2;
          if (time2) {
            obj.endTime = time2.getTime();
          }
        }
        if (this.$refs.child[1].input && this.$refs.child[1].params) {
          let input = this.$refs.child[1].input;        //input框是操作中第二个组件时
          let params = this.$refs.child[1].params;
          if (input && params) {
            obj[params] = input;
          }
        }
        if (this.$refs.child[0].complex_em_input_select && this.$refs.child[0].input) {   //选择参数进行查询
          let comlex_input = this.$refs.child[0].complex_em_input_select;
          let commo_input = this.$refs.child[0].input;
          obj[comlex_input] = commo_input;
        }
        if (this.$refs.child[0].input && this.$refs.child[0].params) {                              //input框是操作中第一个组件时
          let role_manage_input = this.$refs.child[0].input;
          let params = this.$refs.child[0].params;
          obj[params] = role_manage_input;
        }
        if (this.$refs.child[2].input && this.$refs.child[2].params) {                              //input框是操作中第三个组件时
          let operate_input = this.$refs.child[2].input;
          let params = this.$refs.child[2].params;
          obj[params] = operate_input;
        }
        if (this.$refs.child[3].input && this.$refs.child[3].params) {                              //input框是操作中第四个组件时
          let url_input = this.$refs.child[3].input;
          let params = this.$refs.child[3].params;
          obj[params] = url_input;
        }

        find({                      //页面渲染时拿表格数据
          url: this.data.table.table_url,
          params: obj
        }).then(res => {
          console.log(res);
          this.tableData = res.data.list;
          this.totalSize = res.data.total;
        })
      },
      control(obj) {
        this[obj.fn](obj);

      },
      add(obj) {
        this.$refs.dialog.showdialog(obj);  //调用子组件em_dialogs的方法显示弹出框;
        this.delever_obj=obj;
        console.log(this.delever_obj)
      },
      dele(obj) {
        this.multipleSelection.forEach(val => {
          console.log(val);
          this.ids.push(val.id);   //提取出需要传给后台的参数ids
        });
        if (this.ids.length!= 0) {
          dele({
            url: obj.url,
            params: this.ids

          }).then(res => {
            console.log(res);
            this.ids = [];
            this.open3();
            this.init();


          })
        }
      },
      search() {
        this.init();
      },
      modify(obj) {
        console.log(this.$refs.dialog);
        this.$refs.dialog.showdialog(obj);  //调用子组件em_dialogs的方法显示弹出框;
        this.delever_obj=obj;
        console.log(this.delever_obj);
      },
      open3() {
        const h = this.$createElement;
        // this.$notify({
        //   title: '成功',
        //   message: h('i', {style: 'color: teal'}, '删除成功啦'),
        //   type: 'success'
        // });
      },
      handleClose(done) {
        this.$confirm('确认关闭？')
          .then(_ => {
            done();
          })
          .catch(_ => {});
      },
      import(){
          this.dialogFormVisible=true
      },
      export(obj){
        window.location.href="http://192.168.20.18:8080/api/v1"+obj.url
      },
      recieveObj(val){              //把dialog表单里的数据拿到
         console.log(this.delever_obj.url);
         if(val.fn=="add"){
           add({
             url: this.delever_obj.url,
             params:val.form,
             id:this.delever_obj.table_id
           }).then(res=>{
             this.init();
           });
         }
         if(val.fn=="modify"){
           modify({
             url: this.delever_obj.url,
             params:val.form
           }).then(res=>{
             this.init();
           });
         }



      }
    }
  }
</script>

<style scoped lang="scss">
  @import "sole_table";
</style>
